{"version":3,"sources":["components/DisplayData.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayData","props","weather","temperature","description","location","region","country","pressure","precip","humidity","img","wind_speed","className","src","alt","Navbar","onSubmit","e","changeWeather","placeholder","onChange","changeRegion","target","value","App","state","coords","latitude","longitude","data","inputData","change","setState","event","preventDefault","Axios","get","then","res","console","log","weatherData","current","weather_descriptions","name","weather_icons","navigator","geolocation","getCurrentPosition","position","newCoords","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de3f6ea5.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction DisplayData(props) {\n  //console.log(props.weather);\n  const {\n    temperature,\n    description,\n    location,\n    region,\n    country,\n    pressure,\n    precip,\n    humidity,\n    img,\n    wind_speed,\n  } = props.weather;\n  return (\n    <div className='user-weather'>\n      <div className='row'>\n        <div className='col-md-3 weather-temp'>\n          <h1>\n            {temperature}\n            <sup>o</sup>C , {description}\n          </h1>\n          <h4>\n            {location}\n            <b>\n              {region} , {country}\n            </b>\n          </h4>\n        </div>\n\n        <div className='col-md-9'>\n          <img className='mainImg' src={img} alt='weather-img' />\n        </div>\n      </div>\n\n      <div className='row'>\n        <div className='col-md-3 weather-info'>\n          <p>\n            <b>Wind Speed</b>(km/hr)\n          </p>\n          <h2>{wind_speed}</h2>\n        </div>\n\n        <div className='col-md-3 weather-info'>\n          <p>\n            <b>Preassure</b>(millibar)\n          </p>\n          <h2>{pressure}</h2>\n        </div>\n\n        <div className='col-md-3 weather-info'>\n          <p>\n            <b>Precipitation</b>(mm)\n          </p>\n          <h2>{precip}</h2>\n        </div>\n\n        <div className='col-md-3 weather-info'>\n          <p>\n            <b>Humidity</b>(%)\n          </p>\n          <h2>{humidity}</h2>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DisplayData;\n","import React from \"react\";\n\nfunction Navbar(props) {\n  return (\n    <div className='row'>\n      <div className='col-md-6'>\n        <h1 className='title'>Realtime Weather</h1>\n      </div>\n      <div className='col-md-6'>\n        <form className='region' onSubmit={(e) => props.changeWeather(e)}>\n          <input\n            className='regioninput'\n            placeholder='Enter Your Location'\n            onChange={(e) => {\n              props.changeRegion(e.target.value);\n            }}\n          />\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./App.css\";\nimport Axios from \"axios\";\nimport DisplayData from \"./components/DisplayData\";\nimport Navbar from \"./components/Navbar\";\n\nclass App extends React.Component {\n  state = {\n    coords: {\n      latitude: 37,\n      longitude: 127,\n    },\n    data: {},\n    inputData: \"\",\n  };\n\n  componentDidMount() {\n    //console.log('render mounted');\n    if (navigator.geolocation) {\n      //console.log('supported');\n      navigator.geolocation.getCurrentPosition((position) => {\n        //console.log(position.coords.latitude, position.coords.longitude);\n        let newCoords = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        };\n        this.setState({ coords: newCoords });\n        //console.log(this.state.coords);\n\n        Axios.get(\n          `http://api.weatherstack.com/current?access_key=f6cbcd3191263b5df15d64cb7f572627&query=${this.state.coords.latitude},${this.state.coords.longitude}`\n        ).then((res) => {\n          //console.log(res);\n          let weatherData = {\n            temperature: res.data.current.temperature,\n            description: res.data.current.weather_descriptions[0],\n            location: res.data.location.name,\n            region: res.data.location.region,\n            country: res.data.location.country,\n            wind_speed: res.data.current.wind_speed,\n            pressure: res.data.current.pressure,\n            precip: res.data.current.precip,\n            humidity: res.data.current.humidity,\n            img: res.data.current.weather_icons,\n          };\n          this.setState({ data: weatherData });\n          //console.log(this.state.data);\n        });\n      });\n    } else {\n      console.log(\"not supported\");\n    }\n  }\n\n  change = (value) => {\n    //console.log(value);\n    this.setState({ inputData: value });\n    //console.log(this.state.inputData);\n  };\n\n  changeWeather = (event) => {\n    event.preventDefault();\n    Axios.get(\n      `http://api.weatherstack.com/current?access_key=f6cbcd3191263b5df15d64cb7f572627&query=${this.state.inputData}`\n    ).then((res) => {\n      console.log(res);\n      let weatherData = {\n        temperature: res.data.current.temperature,\n        description: res.data.current.weather_descriptions[0],\n        location: res.data.location.name,\n        region: res.data.location.region,\n        country: res.data.location.country,\n        wind_speed: res.data.current.wind_speed,\n        pressure: res.data.current.pressure,\n        precip: res.data.current.precip,\n        humidity: res.data.current.humidity,\n        img: res.data.current.weather_icons,\n      };\n      this.setState({ data: weatherData });\n      //console.log(this.state.data);\n    });\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='container'>\n          <Navbar\n            changeRegion={this.change}\n            changeWeather={this.changeWeather}\n          />\n          <DisplayData weather={this.state.data} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}